type Tx {
  transaction_hash: String!
  txLink: Transaction
    @materializer(
      query: "transaction"
      arguments: [{ name: "id", field: "transaction_hash" }]
    )
}

type TxEdge {
  node: Tx
  cursor: String
}

type TxConnection {
  pageInfo: PageInfo!
  edges: [TxEdge]
}

type Swap {
  amount0: String
  amount1: String
  amountUSD: String
  id: String
  sqrtPriceX96: String
  tick: String
}

type Transaction {
  swaps: [Swap]
}

type Root {
  result: [Tx]
  cursor: String
  page: Int
  page_size: Int
  total: Int
}

type Token0 {
  name: String
}

type Token1 {
  name: String
}

type Pool {
  feeTier: String
  id: String
  token0: Token0
  token1: Token1
  volumeUSD: String
}

type Price {
  amount: String
  base: String
  currency: String
}

type PriceRoot {
  data: Price
}

type Challenge {
  text: String
}

type Data {
  challenge: Challenge
}

type RootChallenge {
  data: Data
}

type Request {
  address: String
}

input ChallengeRequest {
  address: String!
}

scalar Signature

input SignedAuthChallenge {
  """
  The ethereum address you signed the signature with
  """
  address: String!
  """
  The signature
  """
  signature: Signature!
}
scalar Jwt

type AuthenticationResult {
  """
  The access token
  """
  accessToken: Jwt!
  """
  The refresh token
  """
  refreshToken: Jwt!
}

type Query {
  pools(first: Int, orderBy: String, orderDirection: String): [Pool]
    @graphql(
      endpoint: "https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3"
    )

  get_price(pair: String!): PriceRoot
    @rest(
      method: GET
      endpoint: "https://api.coinbase.com/v2/prices/$pair/spot"
    )

  list_of_transactions_pool(
    address: String!
    after: String = ""
    apikey: String!
  ): Root
    @rest(
      method: GET
      endpoint: "https://deep-index.moralis.io/api/v2/$address/logs?chain=eth&cursor=$after"
      headers: [{ name: "X-API-Key", value: "$apikey" }]
    )
  transaction(id: String!): Transaction
    @graphql(
      endpoint: "https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3"
    )
  """
  Querys for Lens
  """
  challenge(request: ChallengeRequest!): Challenge
    @graphql(endpoint: "https://api-mumbai.lens.dev")
}

type Mutation {
  authenticate(request: SignedAuthChallenge!): AuthenticationResult!
    @graphql(endpoint: "https://api-mumbai.lens.dev/")
}
