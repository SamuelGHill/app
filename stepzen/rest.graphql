type Tx {
  transaction_hash: String!
  txLink: Transaction
    @materializer(
      query: "transaction"
      arguments: [{ name: "id", field: "transaction_hash" }]
    )
  detail(apikey: String!): TXDetail
    @materializer(
      query: "tx_details"
      arguments: [
        { name: "txhash", field: "transaction_hash" }
        { name: "apikey", argument: "apikey" }
      ]
    )
}

type TxEdge {
  node: Tx
  cursor: String
}

type TxConnection {
  pageInfo: PageInfo!
  edges: [TxEdge]
}

type Swap {
  amount0: String
  amount1: String
  amountUSD: String
  id: String
  sqrtPriceX96: String
  tick: String
}

type Transaction {
  swaps: [Swap]
}

type Root {
  result: [Tx]
  cursor: String
  page: Int
  page_size: Int
  total: Int
}

type Token0 {
  name: String
}

type Token1 {
  name: String
}

type Pool {
  feeTier: String
  id: String
  token0: Token0
  token1: Token1
  volumeUSD: String
}

type Price {
  amount: String
  base: String
  currency: String
}

type PriceRoot {
  data: Price
}

type Data {
  challenge: Challenge
}

type RootChallenge {
  data: Data
}

type Request {
  address: String
}

type MORALISNFT {
  amount: String
  block_number: String
  block_number_minted: String
  contract_type: String
  last_metadata_sync: DateTime
  last_token_uri_sync: DateTime
  metadata: String
  name: String
  owner_of: String
  symbol: String
  token_address: String
  token_hash: String
  token_id: String
  token_uri: String
}

type NFTList {
  cursor: String
  page: Int
  page_size: Int
  result: [MORALISNFT]
  status: String
  total: Int
}

type Balance {
  balance: String
}

type DataCryptoCompareTX {
  active_addresses: Int
  average_transaction_value: Float
  block_height: Int
  block_size: Int
  block_time: Float
  current_supply: Float
  difficulty: Int
  hashrate: Float
  id: Int
  large_transaction_count: Int
  new_addresses: Int
  symbol: String
  time: Int
  transaction_count: Int
  transaction_count_all_time: Int
  unique_addresses_all_time: Int
  zero_balance_addresses_all_time: Int
}

type DataCryptoCompare {
  Aggregated: Boolean
  Data: [DataCryptoCompareTX]
  TimeFrom: Int
  TimeTo: Int
}

type CryptoCompare {
  Data: DataCryptoCompare
  HasWarning: Boolean
  Message: String
  RateLimit: JSON
  Response: String
  Type: Int
}

type TXLog {
  address: String
  block_hash: String
  block_number: String
  block_timestamp: DateTime
  data: String
  log_index: String
  topic0: String
  topic1: String
  topic2: String
  topic3: JSON
  transaction_hash: String
  transaction_index: String
  transaction_value: String
  transfer_index: [Int]
}

type TXDetail {
  block_hash: String
  block_number: String
  block_timestamp: DateTime
  from_address: String
  gas: String
  gas_price: String
  hash: String
  input: String
  logs: [TXLog]
  nonce: String
  receipt_contract_address: JSON
  receipt_cumulative_gas_used: String
  receipt_gas_used: String
  receipt_root: JSON
  receipt_status: String
  to_address: String
  transaction_index: String
  transfer_index: [Int]
  value: String
}

type Query {
  historical_crypto(token: String!, apikey: Secret!): CryptoCompare
    @rest(
      method: GET
      endpoint: "https://min-api.cryptocompare.com/data/blockchain/histo/day?fsym=$token"
      headers: [{ name: "authorization", value: "Apikey $apikey" }]
    )

  pools(first: Int, orderBy: String, orderDirection: String): [Pool]
    @graphql(
      endpoint: "https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3"
    )

  get_price(pair: String!): PriceRoot
    @rest(
      method: GET
      endpoint: "https://api.coinbase.com/v2/prices/$pair/spot"
    )

  tx_details(txhash: String!, apikey: String!): TXDetail
    @rest(
      method: GET
      endpoint: "https://deep-index.moralis.io/api/v2/transaction/$txhash?chain=eth"
      headers: [{ name: "X-API-Key", value: "$apikey" }]
    )
  list_nft(address: String!, apikey: String!, chain: String!): NFTList
    @rest(
      method: GET
      endpoint: "https://deep-index.moralis.io/api/v2/$address/nft?chain=$chain&format=decimal"
      headers: [{ name: "X-API-Key", value: "$apikey" }]
    )

  get_balance(address: String!, apikey: String!, chain: String!): Balance
    @rest(
      method: GET
      endpoint: "https://deep-index.moralis.io/api/v2/$address/balance?chain=$chain"
      headers: [{ name: "X-API-Key", value: "$apikey" }]
    )

  list_of_transactions_pool(
    address: String!
    after: String = ""
    first: Int! = 20
    apikey: String!
  ): Root
    @rest(
      method: GET
      endpoint: "https://deep-index.moralis.io/api/v2/$address/logs?chain=eth&cursor=$after"
      headers: [{ name: "X-API-Key", value: "$apikey" }]
    )

  transaction(id: String!): Transaction
    @graphql(
      endpoint: "https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3"
    )
}
